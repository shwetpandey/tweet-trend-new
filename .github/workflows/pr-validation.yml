name: Check Build Status and Create PR

on:
  pull_request:
    branches:
      - 'main'

jobs:
  check_and_create_pr:
    runs-on: self-hosted  # Ensure your self-hosted runner is a Windows machine

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Get Build Status
      id: get-build-status
      run: |
        # Capture the output of the curl command in a variable
        $output = curl -u teamcity:Teamcity@098 -s http://localhost:9111/app/rest/builds/id:148
        
        # Use Write-Output to display the captured output
        Write-Output $output

        # Use curl to fetch build status and parse JSON using PowerShell
        $response = curl -u teamcity:Teamcity@098 -s http://localhost:9111/app/rest/builds/id:148
        $json = $response | ConvertFrom-Json
        $STATUS = $json.status
        Write-Output "Build status: $STATUS"
        echo "STATUS=$STATUS" >> $env:GITHUB_ENV
      shell: powershell

    - name: Fail or Pass PR Based on Build Status
      id: evaluate-status
      run: |
        # Check if the build status is 'SUCCESS'
        if ($env:STATUS -ne "SUCCESS") {
          Write-Output "Build status is not successful. Failing the workflow."
          exit 1
        }
        Write-Output "Build status is successful. Proceeding."
      shell: powershell

    - name: Create Pull Request
      if: ${{ steps.evaluate-status.outcome == 'success' }}
      uses: actions/github-script@v6
      with:
        script: |
          const { getOctokit, context } = require('@actions/github');
          const octokit = getOctokit(process.env.GITHUB_TOKEN);
          
          const { data: pullRequest } = await octokit.rest.pulls.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Pull Request Title',
            head: context.ref,
            base: 'main',
            body: 'Pull Request Body'
          });
          console.log(`Pull request created: ${pullRequest.html_url}`);
